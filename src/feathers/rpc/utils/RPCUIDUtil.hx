/*
	Licensed to the Apache Software Foundation (ASF) under one or more
	contributor license agreements.  See the NOTICE file distributed with
	this work for additional information regarding copyright ownership.
	The ASF licenses this file to You under the Apache License, Version 2.0
	(the "License"); you may not use this file except in compliance with
	the License.  You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
 */

package feathers.rpc.utils;

import openfl.utils.ByteArray;

/**
	The RPCUIDUtil class is a copy of UIDUtil without some functions that
	cause dependency problems when RPC messages are put in a bootstrap loader.
**/
class RPCUIDUtil {
	//--------------------------------------------------------------------------
	//
	//  Class constants
	//
	//--------------------------------------------------------------------------
	// Char codes for 0123456789ABCDEF
	private static final ALPHA_CHAR_CODES:Array<Int> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70];

	private static final DASH:Int = 45; // dash ascii
	private static final UIDBuffer:ByteArray = {
		var bytes = new ByteArray(); // static ByteArray used for UID generation to save memory allocation cost
		bytes.endian = BIG_ENDIAN;
		bytes;
	}

	//--------------------------------------------------------------------------
	//
	//  Class methods
	//
	//--------------------------------------------------------------------------

	/**
		Generates a UID (unique identifier) based on ActionScript's
		pseudo-random number generator and the current time.

		The UID has the form
		`"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"`
		where X is a hexadecimal digit (0-9, A-F).

		This UID will not be truly globally unique; but it is the best
		we can do without player support for UID generation.

		@return The newly-generated UID.
	**/
	public static function createUID():String {
		UIDBuffer.position = 0;

		for (i in 0...8) {
			UIDBuffer.writeByte(ALPHA_CHAR_CODES[Std.int(Math.random() * 16)]);
		}

		for (i in 0...3) {
			UIDBuffer.writeByte(DASH);
			for (j in 0...4) {
				UIDBuffer.writeByte(ALPHA_CHAR_CODES[Std.int(Math.random() * 16)]);
			}
		}

		UIDBuffer.writeByte(DASH);

		var time = Std.int(Date.now().getTime()); // extract last 8 digits
		var timeString:String = StringTools.hex(time).toUpperCase();
		// 0xFFFFFFFF milliseconds ~= 3 days, so timeString may have between 1 and 8 digits, hence we need to pad with 0s to 8 digits
		var i = 8;
		while (i > timeString.length) {
			UIDBuffer.writeByte(48);
			i--;
		}
		UIDBuffer.writeUTFBytes(timeString);

		for (i in 0...4) {
			UIDBuffer.writeByte(ALPHA_CHAR_CODES[Std.int(Math.random() * 16)]);
		}

		return UIDBuffer.toString();
	}

	/**
		Converts a 128-bit UID encoded as a ByteArray to a String representation.
		The format matches that generated by createUID. If a suitable ByteArray
		is not provided, null is returned.

		@param ba ByteArray 16 bytes in length representing a 128-bit UID.

		@return String representation of the UID, or null if an invalid ByteArray is provided.
	**/
	public static function fromByteArray(ba:ByteArray):String {
		if (ba != null && ba.length >= 16 && ba.bytesAvailable >= 16) {
			UIDBuffer.position = 0;
			var index:UInt = 0;
			for (i in 0...16) {
				if (i == 4 || i == 6 || i == 8 || i == 10)
					UIDBuffer.writeByte(DASH); // Hyphen char code

				var b = ba.readByte();
				UIDBuffer.writeByte(ALPHA_CHAR_CODES[(b & 0xF0) >>> 4]);
				UIDBuffer.writeByte(ALPHA_CHAR_CODES[(b & 0x0F)]);
			}
			return UIDBuffer.toString();
		}

		return null;
	}

	/**
		A utility method to check whether a String value represents a 
		correctly formatted UID value. UID values are expected to be 
		in the format generated by createUID(), implying that only
		capitalized A-F characters in addition to 0-9 digits are
		supported.

		@param uid The value to test whether it is formatted as a UID.

		@return Returns true if the value is formatted as a UID.
	**/
	public static function isUID(uid:String):Bool {
		if (uid != null && uid.length == 36) {
			for (i in 0...36) {
				var c = uid.charCodeAt(i);

				// Check for correctly placed hyphens
				if (i == 8 || i == 13 || i == 18 || i == 23) {
					if (c != DASH) {
						return false;
					}
				}
				// We allow capital alpha-numeric hex digits only
				else if (c < 48 || c > 70 || (c > 57 && c < 65)) {
					return false;
				}
			}

			return true;
		}

		return false;
	}

	/**
		Converts a UID formatted String to a ByteArray. The UID must be in the
		format generated by createUID, otherwise null is returned.

		@param String representing a 128-bit UID

		@return ByteArray 16 bytes in length representing the 128-bits of the UID or null if the uid could not be converted.
	**/
	public static function toByteArray(uid:String):ByteArray {
		if (isUID(uid)) {
			var result:ByteArray = new ByteArray();
			result.endian = BIG_ENDIAN;

			var i = 0;
			while (i < uid.length) {
				var c:String = uid.charAt(i);
				if (c == "-") {
					i++;
					continue;
				}
				var h1 = getDigit(c);
				i++;
				var h2 = getDigit(uid.charAt(i));
				result.writeByte(((h1 << 4) | h2) & 0xFF);
				i++;
			}
			result.position = 0;
			return result;
		}

		return null;
	}

	// Returns the decimal representation of a hex digit.
	private static function getDigit(hex:String):UInt {
		switch (hex) {
			case "A" | "a":
				return 10;
			case "B" | "b":
				return 11;
			case "C" | "c":
				return 12;
			case "D" | "d":
				return 13;
			case "E" | "e":
				return 14;
			case "F" | "f":
				return 15;
			default:
				return Std.parseInt(hex);
		}
	}
}
